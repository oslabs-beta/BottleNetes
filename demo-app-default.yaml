apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-on-bottlenetes-frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: demo-app-on-bottlenetes-frontend
  template:
    metadata:
      labels:
        app: demo-app-on-bottlenetes-frontend
    spec:
      containers:
        - name: demo-app-on-bottlenetes-frontend
          image: randomlettergenerator/demo-app-on-bottlenetes-frontend:v0.1
          imagePullPolicy: Always
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "2048Mi"
              cpu: "2000m"
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-on-bottlenetes-backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: demo-app-on-bottlenetes-backend
  template:
    metadata:
      labels:
        app: demo-app-on-bottlenetes-backend
    spec:
      containers:
        - name: demo-app-on-bottlenetes-backend
          image: randomlettergenerator/demo-app-on-bottlenetes-backend:v0.1
          imagePullPolicy: Always
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "2048Mi"
              cpu: "2000m"
          ports:
            - containerPort: 4000
          env:
            - name: EXTERNAL_API_URL
              valueFrom:
                secretKeyRef:
                  name: external-api-url-secret
                  key: EXTERNAL_API_URL
          readinessProbe:
            httpGet:
              path: /api/health
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              port: 4000
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app-on-bottlenetes-frontend-service
spec:
  type: NodePort
  selector:
    app: demo-app-on-bottlenetes-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30082
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app-on-bottlenetes-backend-service
spec:
  selector:
    app: demo-app-on-bottlenetes-backend
  ports:
    - protocol: TCP
      port: 4000
      targetPort: 4000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app-on-bottlenetes-frontend-istio-service
  namespace: default
  labels:
    istio-prometheus-scrape: "true"
spec:
  selector:
    app: demo-app-on-bottlenetes-frontend
  ports:
    - name: http-envoy-prom
      port: 15020
      targetPort: 15020
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app-on-bottlenetes-backend-istio-service
  namespace: default
  labels:
    istio-prometheus-scrape: "true"
spec:
  selector:
    app: demo-app-on-bottlenetes-backend
  ports:
    - name: http-envoy-prom
      port: 15020
      targetPort: 15020
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-to-backend
spec:
  podSelector:
    matchLabels:
      app: demo-app-on-bottlenetes-backend
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: demo-app-on-bottlenetes-frontend
      ports:
        - protocol: TCP
          port: 4000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        # Serve React static files
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri /index.html;
        }

        # Proxy API requests to backend service
        location /api/ {
            proxy_pass http://demo-app-on-bottlenetes-backend-service:4000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Global error handling (moved outside the location block)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-service-monitor
  namespace: default
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: istiod
  namespaceSelector:
    matchNames:
      - istio-system
  endpoints:
    - interval: 10s
      path: /metrics
      port: http-monitoring
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-sidecar-servicemonitor
  namespace: default
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      istio-prometheus-scrape: "true"
  namespaceSelector:
    any: true
  endpoints:
    - port: http-envoy-prom
      path: /metrics
      interval: 10s
      scheme: http
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: fake-traffic-gateway
  namespace: default
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: fake-traffic-virtualservice
  namespace: default
spec:
  hosts:
    - "*"
  gateways:
    - fake-traffic-gateway
  http:
    - match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: demo-app-on-bottlenetes-frontend-service
            port:
              number: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: external-api-url-secret
type: Opaque
data:
  EXTERNAL_API_URL: aHR0cHM6Ly9jYXRmYWN0Lm5pbmphL2ZhY3Q=
---
